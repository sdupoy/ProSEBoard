<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="fr.eseo.ld.proseboard.mybatis.mappers.TrainingMapper">
	<resultMap type="Training" id="TrainingResult">
		<id property="id" column="id_training" />
		<result property="idEvent" column="id_event" />
		<result property="idEducator" column="id_educator" />
		<result property="subject" column="subject" />
		<result property="isCharged" column="isCharged" />
		<result property="ressources" column="ressources" />
		<result property="hourCost" column="hourCost" />
	</resultMap>
	
	<resultMap type="Event" id="EventResult">
		<id property="id" column="id_event" />
		<result property="name" column="event_name" />
		<result property="description" column="event_description" />
		<result property="startDate" column="start_date" />
		<result property="endDate" column="end_date" />
		<result property="validation" column="validation" />
		<result property="idCreator" column="id_creator" />
	</resultMap>
	
	<resultMap type="Training" id="TrainingResultWithAttendersAndEvent">
		<id property="id" column="id_training" />
		<result property="id" column="id_event" />
		<result property="idEducator" column="id_educator" />
		<result property="subject" column="subject" />
		<result property="isCharged" column="isCharged" />
		<result property="ressources" column="ressources" />
		<result property="hourCost" column="hourCost" />
		<association property="event" javaType="Event">
			<id property="id" column="id_event" />
			<result property="description" column="event_description"/>
			<result property="startDate" column="start_date" />
			<result property="endDate" column="end_date" />
		</association>
		<collection property="attenders" javaType="ArrayList" ofType="User" resultMap="fr.eseo.ld.proseboard.mybatis.mappers.UserMapper.UserResult" />
	</resultMap>
	
	<resultMap type="User" id="UserResult">
		<id property="id" column="id_user" />
		<result property="idRedmine" column="id_redmine" />
		<result property="mail" column="mail_address" />
		<result property="lastName" column="name" />
		<result property="firstName" column="first_name" />
		<result property="idAccount" column="id_account"/>
		<collection property="statuses" javaType="ArrayList" ofType="Status" column="id_status" resultMap="fr.eseo.ld.proseboard.mybatis.mappers.StatusMapper.StatusResult" />
	</resultMap>
	
	<resultMap type="Training" id="TrainingResultWithUsers">
		<id property="id" column="id_training" />
		<result property="idEvent" column="id_event" />
		<result property="idEducator" column="id_educator" />
		<result property="subject" column="subject" />
		<result property="isCharged" column="isCharged" />
		<result property="ressources" column="ressources" />
		<result property="hourCost" column="hourCost" />
		<association property="team" javaType="Team">
			<id property="id" column="id_team" />
			<result property="teamName" column="team_name" />
			<result property="projectName" column="project_name" />
		</association>
		<association property="event" javaType="Event">
			<id property="id" column="id_event" />
			<result property="startDate" column="start_date" />
			<result property="endDate" column="end_date" />
		</association>
		<association property="attenders" javaType="User">
			<id property="id" column="id_user" />
			<result property="lastName" column="last_name" />
			<result property="firstName" column="first_name" />
			<result property="mail" column="mail_address" />
		</association>		
	</resultMap>

	<insert id="insertTrainingPartial">
		INSERT INTO training (id_event,id_educator,subject)
		VALUES(#{idEvent},#{idEducator},#{subject});
	</insert>
	
	<insert id="insertTrainingComplete" parameterType="Training">
		INSERT INTO training (id_event,id_educator,subject,ressources,hourCost)
		VALUES(#{idEvent},#{idEducator},#{subject},#{ressources},#{hourCost});
	</insert>
	
	<insert id="insertTrainingTest" parameterType="Training">
		INSERT INTO training (id_event,id_educator,subject,ressources,hourCost)
		VALUES(#{idEvent},#{idEducator},#{subject},#{ressources},#{hourCost});
		 <if test="author != null and author.name != null">
			AND author_name like #{author.name}
		</if>
	</insert>
	
	
	<select id="getAllTrainingAfter" resultMap="TrainingResult">
		SELECT training.*
		FROM training
		WHERE training.id_event IN (
			SELECT event.id_event FROM event
			WHERE event.start_date <![CDATA[ > ]]> #{start}
		)
	</select>
	
	<select id="getAllTrainingAfterValidate" resultMap="TrainingResultWithUsers">
		SELECT training.*, user.* 
		FROM training, user
		WHERE training.id_event IN (
			SELECT event.id_event FROM event
			WHERE event.start_date <![CDATA[ > ]]> #{start}
			AND event.validation = 2
		)
	</select>
	
	<select id="getAllWithUsers" resultMap="TrainingResultWithUsers">
		SELECT training.*, user.name as last_name, user.first_name, event.start_date, event.end_date, team.team_name, team.project_name
		FROM training, user, event, team
		WHERE training.id_educator = #{idEducator}
		AND user.id_user IN (
			SELECT team_user.id_user
			FROM team_user, team, session
			WHERE team_user.id_team = team.id_team
			AND team.id_session = session.id
			AND session.isOpen = 1
		)
	</select>
	
	<select id="getAll" resultMap="TrainingResultWithUsers">
		SELECT training.*, event.start_date, event.end_date, user.name as last_name, user.first_name
		FROM training, user, event
		
	</select>
	
	<select id="getEvent" parameterType="Long" resultMap="EventResult">
		SELECT * 
		FROM event
		WHERE event.id_event in (
			SELECT training.id_event FROM training
			WHERE training.id_training =#{id}
		)
	</select>

	<select id="getByEventId" parameterType="Long" resultMap="TrainingResult">
		SELECT * 
		FROM training
		WHERE id_event=#{idEvent}
	</select>
	
	<select id="getById" parameterType="Long" resultMap="TrainingResult">
		SELECT * FROM training
		WHERE id_training=#{id}
	</select>
	
	<select id="getByEducator" parameterType="long" resultType="Training">
		SELECT * FROM training 
		WHERE id_educator = #{idEducator}
	</select>
	
	<update id="updateRessourcesAndHourCost" parameterType="Training">
		UPDATE training SET 
		ressources=#{ressources},
		hourCost=#{hourCost}
		WHERE id_event=#{idEvent}
	</update>
	
	<update id="modifyTraining" parameterType="Training">
		UPDATE training SET
		subject = #{subject},
		hourCost = #{hourCost},
		ressources = #{ressources}
		WHERE id_training = #{idTraining}
	</update>

	<select id="searchTrain" resultMap="TrainingResultWithAttendersAndEvent">
		SELECT training.*, event.start_date, event.end_date 
		FROM training, event
		WHERE id_educator= #{idUsr}
		AND isCharged = 'false'
		AND training.id_event = event.id_event
	</select>
	
	<select id="getEducator" parameterType="Long" resultMap="UserResult">
		SELECT user.* 
		FROM user
		WHERE user.id_user=#{idEducator}
	</select>
	
	<select id="getNbAttenders" parameterType="Training" resultType="_int">
		SELECT DISTINCT COUNT(*) 
		FROM event_user, training
		WHERE training.id_event =#{idEvent}
		AND training.id_event = event_user.id_event
	</select>
	
	<select id="getAttenders" parameterType="Training" resultMap="UserResult">
		SELECT user.* 
		FROM user
		WHERE user.id_user IN (
			SELECT event_user.id_user
			FROM event_user
			WHERE event_user.id_event = #{idEvent}
		)
	</select>
	
	<select id="getEveryEventAttender" resultMap="UserResult">
		SELECT user.* 
		FROM user
		WHERE user.id_user IN (
			SELECT event_user.id_user
			FROM event_user
		)
	</select>
	
	<select id="getAttendersFromTeam" parameterType="map" resultMap="UserResult">
		SELECT user.* 
		FROM user
		WHERE user.id_user IN (
			SELECT event_user.id_user
			FROM event_user
			WHERE event_user.id_event = #{idEvent}
		) AND user.id_user IN (
			SELECT team_user.id_user
			FROM team_user
			WHERE team_user.id_team = #{idTeam}
		)
	</select>
	
	<select id="getByTrainerForReport" parameterType="long" resultMap="TrainingResultWithAttendersAndEvent">
		SELECT DISTINCT training.*, event.*
		FROM training, event, user, event_user, session
		WHERE id_educator = #{idEducator}
		AND training.id_event = event.id_event
		AND training.report IS NULL
		AND training.id_event = event_user.id_event
		AND event_user.id_user = user.id_user
		AND event.id_session = session.id
		AND session.isOpen = 1
	</select>
	
	<update id="chargeTeam" parameterType="Training">
		UPDATE training, event_user, team_user, team, account
		SET account.solde = (account.solde-#{amountPerAttender})
		WHERE training.id_event = event_user.id_event
		AND event_user.id_user = team_user.id_user
		AND team_user.id_team = team.id_team
		AND team.id_account = account.id_account 
		AND training.id_event = #{idEvent}
		AND training.id_educator= #{idEducator}
	</update>
	
	<update id="creditTrainer" parameterType="Training">
		UPDATE account, training, user
		SET account.solde = (account.solde+(training.hourCost*#{nbHours}))
		WHERE account.id_account = user.id_account
		AND user.id_user = training.id_educator
		AND training.id_event = #{idEvent}
		AND training.id_educator= #{idEducator}
	</update>
	
	<update id="setTrainingToCharged" parameterType="Training">
		UPDATE training, event_user, team_user, team, account
		SET isCharged = true
		WHERE training.id_event = event_user.id_event
		AND event_user.id_user = team_user.id_user
		AND team_user.id_team = team.id_team
		AND team.id_account = account.id_account 
		AND training.id_event = #{idEvent}
		AND training.id_educator= #{idEducator}
		AND isCharged = false;
	</update>
	
	<update id="updateReport" parameterType="Training">
		UPDATE training
		SET report = #{report}
		WHERE id_event = #{idEvent}
		AND id_educator= #{idEducator}
	</update>
	
</mapper>