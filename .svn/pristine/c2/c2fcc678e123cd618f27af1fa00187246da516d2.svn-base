package fr.eseo.ld.proseboard.controllers.admin;

import java.io.IOException;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.session.SqlSession;

import fr.eseo.ld.proseboard.models.Session;
import fr.eseo.ld.proseboard.models.Status;
import fr.eseo.ld.proseboard.models.Team;
import fr.eseo.ld.proseboard.models.TeamUser;
import fr.eseo.ld.proseboard.models.User;
import fr.eseo.ld.proseboard.mybatis.MyBatisUtil;
import fr.eseo.ld.proseboard.mybatis.mappers.SessionMapper;
import fr.eseo.ld.proseboard.mybatis.mappers.StatusMapper;
import fr.eseo.ld.proseboard.mybatis.mappers.TeamMapper;
import fr.eseo.ld.proseboard.mybatis.mappers.TeamUserMapper;
import fr.eseo.ld.proseboard.mybatis.mappers.UserMapper;

@WebServlet("/ManageMembers")
public class ManageMembers extends HttpServlet {

    private static final long serialVersionUID = 1L;

    public ManageMembers() {
        super();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();
        TeamMapper teamMapper = sqlSession.getMapper(TeamMapper.class);
        SessionMapper sessionMapper = sqlSession.getMapper(SessionMapper.class);
        StatusMapper statusMapper = sqlSession.getMapper(StatusMapper.class);
        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);
        TeamUserMapper teamUserMapper = sqlSession.getMapper(TeamUserMapper.class);

        String idTeam = request.getParameter("idTeam");
        Team team = teamMapper.getTeamById(new Long(idTeam));
        Session session = sessionMapper.getSessionById(team.getIdSession());

        int id = 0;
        List<Status> status = statusMapper.getAll();

        for(int i = 0; i < status.size(); i++){
            if("student".equals(status.get(i).getName())) {
                id= status.get(i).getId().intValue();
            }
        }

        List<User> studentsAvailable = userMapper.getAllUserByStatus(new Long(id));
        List<User> members = teamMapper.getMembersByTeamId(new Long(idTeam));
        List<TeamUser> studentsHavingTeam = teamUserMapper.getAll();

        for(int v = 0; v < studentsHavingTeam.size(); v++){
            for(int i = 0; i < studentsAvailable.size(); i++){
                if(studentsAvailable.get(i).getId()==studentsHavingTeam.get(v).getIdUser()) {
                    studentsAvailable.remove(i);
                }
            }
        }

        request.setAttribute("idTeam", new Long(idTeam));
        request.setAttribute("idSession",team.getIdSession());
        request.setAttribute("sessionName",session.getName());
        request.setAttribute("teamName",team.getTeamName());
        request.setAttribute("members",members);
        request.setAttribute("students",studentsAvailable);
        request.getRequestDispatcher("/WEB-INF/JSP/admin/sessions/ManageMembers.jsp").forward(request, response);
        sqlSession.close();
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        SqlSession sqlSession = MyBatisUtil.getSqlSessionFactory().openSession();

        if(request.getParameter("idMemberForDelete") == null) {
            // On demande l'ajout d'un membre
            String idMember = request.getParameter("idMember");
            String idTeam = request.getParameter("idTeam");
            TeamUserMapper teamUserMapper = sqlSession.getMapper(TeamUserMapper.class);
            TeamUser teamUser = new TeamUser(new Long(idMember),new Long(idTeam));
            teamUserMapper.insertTeamUser(teamUser);

        }else{

            // On demande la suppression du membre précisé par l'idMember
            String idMemberForDelete = request.getParameter("idMemberForDelete");
            TeamUserMapper teamUserMapper = sqlSession.getMapper(TeamUserMapper.class);
            Long idTeam = new Long(teamUserMapper.getTeamIdFromUserId(new Long(idMemberForDelete)));
            request.setAttribute("idTeam", idTeam);
            teamUserMapper.deleteTeamUser(new Long(idMemberForDelete));
        }
        sqlSession.commit();
        sqlSession.close();	
        doGet(request,response);
    }
}
