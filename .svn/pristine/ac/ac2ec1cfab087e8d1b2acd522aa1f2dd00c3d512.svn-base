package fr.eseo.ld.proseboard.selenium;

import static org.testng.AssertJUnit.assertEquals;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class ProseBoardTestWelcomePage {

	private WebDriver webDriver;

	/*
	 * Admin connexion + HtmlUnitDriver
	 * 
	 * Attention certains test sont spécifiques au profil administrateur Maxime
	 * Melet, changer de personne entrainera l'échec des tests.
	 */
	@BeforeClass
	public void initiateWebDriver() {
		webDriver = new HtmlUnitDriver();
		webDriver.get("http://localhost:8080/proseboard");
		WebElement usernameBox = webDriver.findElement(By.name("login"));
		WebElement passwordBox = webDriver.findElement(By.name("password"));
		usernameBox.sendKeys("admin@proseboard.fr");
		passwordBox.sendKeys("admin");
		WebElement loginButton = webDriver.findElement(By.name("submit"));
		loginButton.click();
	}

	/*
	 * Test title is good
	 */
	@Test
	public void testWelcomePageTitle() {
		webDriver.get("http://localhost:8080/proseboard");
		assertEquals(webDriver.getTitle(), "ProSEBoard");
	}

	/*
	 * Test that button "deconnexion" exist
	 */
	@Test(dependsOnMethods = { "testWelcomePageTitle" })
	public void testButtonDeconnexionExist() {
		WebElement webElement = webDriver.findElement(By
				.linkText("Déconnexion"));
		assertEquals(webElement.getText(), "Déconnexion");
	}

	/*
	 * Test ProSEBoard brand upper left corner content.
	 */
	@Test(dependsOnMethods = { "testButtonDeconnexionExist" })
	public void testBrandExist() {
		WebElement webElement = webDriver.findElement(By
				.className("sidebar-brand"));
		assertEquals(webElement.getText(), "ProSEBoard");
	}

	/*
	 * Test présence des liens sur l'emplacement en dessous de ProSEBoard brand.
	 */
	@Test(dependsOnMethods = { "testBrandExist" })
	public void testLeftContent() {
		List<WebElement> webElementLeftContent = webDriver.findElements(By
				.tagName("a"));
		WebElement disconnectButton = webDriver.findElement(By
				.linkText("Déconnexion"));
		assertEquals(webElementLeftContent.get(0).getText(), "ProSEBoard");
		assertEquals(webElementLeftContent.get(1).getAttribute("href"),
				"http://localhost:8080/proseboard/ServletMessagerie");
		assertEquals(webElementLeftContent.get(2).getAttribute("href"),
				"http://localhost:8080/proseboard/planning");

		assertEquals(disconnectButton.getText(), "Déconnexion");
	}

	/*
	 * Test that admin can chose his own actions. (actually -Creer session
	 * -Gerer utilisateur -Creer utilisateur)
	 */
	@Test(dependsOnMethods = { "testLeftContent" })
	public void testAdminOption() {
		List<WebElement> webElements = webDriver.findElements(By.tagName("li"));
		WebElement gererSessionLink = webElements.get(4);
		WebElement gererUserLink = webElements.get(5);
		WebElement creerUserLink = webElements.get(6);
		assertEquals(gererSessionLink.getText(), "Gérer les sessions");
		assertEquals(gererUserLink.getText(), "Gérer les utilisateurs");
		assertEquals(creerUserLink.getText(), "Créer un utilisateur");
	}

}
